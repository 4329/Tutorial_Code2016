// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<Shooter> Robot::shooter;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Pivot> Robot::pivot;
std::shared_ptr<Arm> Robot::arm;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Timer> Robot::timer;

void Robot::RobotInit() {
	RobotMap::init();	//initializes all of the electrical components
	//then creates the objects to all of the classes
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());
    shooter.reset(new Shooter());
    intake.reset(new Intake());
    pivot.reset(new Pivot());
    arm.reset(new Arm());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	timer.reset(new Timer());
	timer->Stop();	//timer shouldn't be running until shoot and autonomous command is called

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new Autonomous());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}
//called when disabled mode is continually running
void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

//called when autonomous mode first starts
void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}
//called when autonomous mode is continually running
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}
//called when telop mode starts
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
}
//called when telop mode is still running
void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();	//runs all of the commands in the Commands file
}

//called when test mode starts
void Robot::TestPeriodic() {
	lw->Run();	//starts the live window
				//which s used for seeing the data of all of the electrical components
}

START_ROBOT_CLASS(Robot);
//if you have eclispe working, right click "START_ROBOT_CLASS" and click "open declaration"
//you'll notice that in the START_ROBOT_CLASS function there is a "main" function
//this is where the entire program starts
